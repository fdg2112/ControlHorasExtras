@{
    ViewData["Title"] = "Gestión de Empleados";
    var empleados = ViewData["Empleados"] as List<ControlHorasExtras.Models.Empleado>;
}

<h1>Gestión de Empleados</h1>

<div class="container mt-4">
    <h2>Empleados en tu Área y Secretaría</h2>

    <!-- Tabla de empleados -->
    @if (empleados != null && empleados.Count > 0)
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Legajo</th>
                    <th>Apellido</th>
                    <th>Nombre</th>
                    <th>Categoría Salarial</th>
                    <th>Área</th>
                    <th>Secretaría</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var empleado in empleados)
                {
                    <tr>
                        <td>@empleado.Legajo</td>
                        <td>@empleado.Apellido</td>
                        <td>@empleado.Nombre</td>
                        <td>@empleado.Categoria?.NombreCategoria</td>
                        <td>@empleado.Area?.NombreArea</td>
                        <td>@empleado.Secretaria?.NombreSecretaria</td>
                        <td>
                            <a href="@Url.Action("EditEmpleado", new { id = empleado.EmpleadoId })" class="btn btn-warning btn-sm">Editar</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No hay empleados disponibles para tu área o secretaría.</p>
    }
</div>

<!-- Formulario flotante para agregar nuevo empleado -->
<div class="floating-form">
    <button class="btn btn-primary" id="btnAgregarEmpleado" onclick="cargarFormulario()">Agregar Empleado</button>
    <form id="formEmpleado" class="hidden mt-3">
        @Html.AntiForgeryToken()
        <h4>Agregar Nuevo Empleado</h4>

        <!-- Campo de Legajo -->
        <div class="mb-3">
            <label for="legajo" class="form-label">Legajo</label>
            <input type="number" class="form-control" id="legajo" name="Legajo" required>
        </div>

        <!-- Campo de Nombre -->
        <div class="mb-3">
            <label for="nombre" class="form-label">Nombre</label>
            <input type="text" class="form-control" id="nombre" name="Nombre" required>
        </div>

        <!-- Campo de Apellido -->
        <div class="mb-3">
            <label for="apellido" class="form-label">Apellido</label>
            <input type="text" class="form-control" id="apellido" name="Apellido" required>
        </div>

        <!-- Campo de Categoría Salarial -->
        <div class="mb-3">
            <label for="categoriaId" class="form-label">Categoría Salarial</label>
            <select class="form-select" id="categoriaId" name="CategoriaId" required>
                @if (ViewData["Categorias"] != null)
                {
                    var categorias = ViewData["Categorias"] as List<ControlHorasExtras.Models.CategoriasSalariales>;
                    if (categorias != null && categorias.Any())
                    {
                        @foreach (var categoria in categorias)
                        {
                            <option value="@categoria.CategoriaId">@categoria.NombreCategoria</option>
                        }
                    }
                    else
                    {
                        <option value="">No hay categorías disponibles</option>
                    }
                }
                else
                {
                    <option value="">No se pudo cargar las categorías</option>
                }
            </select>
        </div>

        <!-- Campo de Área -->
        <div class="mb-3">
            <label for="areaId" class="form-label">Área</label>
            <select class="form-select" id="areaId" name="AreaId" required>
                <option value="" selected disabled>Seleccione un área</option>
            </select>
        </div>

        <!-- Campo de Secretaría -->
        <div class="mb-3">
            <label for="secretariaId" class="form-label">Secretaría</label>
            <select class="form-select" id="secretariaId" name="SecretariaId" required>
                <option value="" selected disabled>Seleccione una secretaría</option>
            </select>
        </div>

        <button type="submit" class="btn btn-success">Guardar</button>
        <button type="button" class="btn btn-secondary" onclick="toggleForm()">Cerrar</button>
    </form>
</div>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    const formEmpleado = document.getElementById('formEmpleado');
    const btnAgregarEmpleado = document.getElementById('btnAgregarEmpleado');

    function cargarFormulario() {
        formEmpleado.classList.toggle("hidden");
        btnAgregarEmpleado.classList.toggle("hidden");

        if (!formEmpleado.classList.contains("hidden")) {
            // Solicitar datos filtrados según el usuario logueado
            fetch("/Employee/GetAreasAndSecretarias")
                .then((response) => response.json())
                .then((data) => {
                    cargarOpcionesConSeleccion(data);
                })
                .catch((error) => console.error("Error al cargar las opciones:", error));
        }
    }

    function cargarOpcionesConSeleccion(data) {
        // Cargar áreas
        const areaSelect = document.getElementById("areaId");
        areaSelect.innerHTML = '<option value="" disabled>Seleccione un área</option>';
        data.areas.forEach((area) => {
            const selected = data.defaultAreaId === area.id ? "selected" : "";
            areaSelect.innerHTML += `<option value="${area.id}" ${selected}>${area.nombre}</option>`;
        });

        // Cargar secretarías
        const secretariaSelect = document.getElementById("secretariaId");
        secretariaSelect.innerHTML = '<option value="" disabled>Seleccione una secretaría</option>';
        data.secretarias.forEach((secretaria) => {
            const selected = data.defaultSecretariaId === secretaria.id ? "selected" : "";
            secretariaSelect.innerHTML += `<option value="${secretaria.id}" ${selected}>${secretaria.nombre}</option>`;
        });
    }


    function toggleForm() {
        formEmpleado.classList.toggle('hidden');
        btnAgregarEmpleado.classList.toggle('hidden');
    }

    formEmpleado.addEventListener('submit', function (e) {
        e.preventDefault();
        const formData = new FormData(formEmpleado);
        fetch('/Employee/CreateEmployee', { // Cambiado el endpoint
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            if (data.success) {
                Swal.fire({
                    title: 'Éxito',
                    text: data.message,
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then(() => location.reload());
            } else {
                Swal.fire({
                    title: 'Error',
                    text: data.message,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        })
        .catch(error => {
            console.error('Error en la solicitud:', error);
            Swal.fire({
                title: 'Error',
                text: 'Ocurrió un error inesperado.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        });
    });

    document.getElementById("legajo").addEventListener("blur", function () {
        const legajoInput = this.value;

        // Validar que sea un número de 3 dígitos
        if (!/^\d{3}$/.test(legajoInput)) {
            Swal.fire({
                title: "Error",
                text: "El legajo debe ser un número de 3 dígitos.",
                icon: "error",
                confirmButtonText: "OK"
            });
            this.value = ""; // Limpiar el campo
            return;
        }

        // Verificar si el legajo ya existe en la base de datos
        fetch(`/Employee/CheckLegajo?legajo=${legajoInput}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (data.exists) {
                    Swal.fire({
                        title: "Legajo ya registrado",
                        html: `
                            <p>El legajo ingresado pertenece a:</p>
                            <p><strong>${data.empleado.Nombre} ${data.empleado.Apellido}</strong></p>
                            <p>Área: ${data.empleado.AreaNombre}</p>
                            <p>Secretaría: ${data.empleado.SecretariaNombre}</p>
                        `,
                        icon: "warning",
                        confirmButtonText: "OK"
                    });
                    document.getElementById("legajo").value = ""; // Limpiar el campo
                }
            })
            .catch(error => console.error("Error al verificar el legajo:", error));
    });

</script>

<style>
    .floating-form {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background: white;
        padding: 10px;
        border-radius: 8px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        max-width: 350px;
        z-index: 9999;
        font-size: 0.9rem;
    }

        .floating-form h4 {
            font-size: 1rem;
            margin-bottom: 8px;
        }

        .floating-form .form-label {
            font-size: 0.85rem;
            margin-bottom: 4px;
        }

        .floating-form .form-control,
        .floating-form .form-select {
            font-size: 0.8rem;
            padding: 6px;
            height: 30px;
        }

        .floating-form button {
            font-size: 0.85rem;
            padding: 6px 12px;
            margin-top: 10px;
        }

    .hidden {
        display: none;
    }
</style>
