@{
    ViewData["Title"] = "Dashboard";
    var horasDelMes = ViewData["HorasDelMes"] as int? ?? 0;
    var gastoDelMes = ViewData["GastoDelMes"] as double? ?? 0.0;
    var rol = User.FindFirst("Rol")?.Value;
}

<!-- Graficos -->
<div class="container mt-4">
    <h1>Bienvenido @User.FindFirst("Nombre")?.Value</h1>
    @if (rol == "Secretario" || rol == "Intendente" || rol == "Secretario de Hacienda")
    {
        <div class="col-md-6">
            <label for="areaFilter">Filtrar por área:</label>
            <select id="areaFilter" class="form-select">
                <option value="">Todas las áreas</option>
                @foreach (var area in ViewData["Areas"] as List<ControlHorasExtras.Models.Area>)
                {
                    <option value="@area.AreaId">@area.NombreArea</option>
                }
            </select>
        </div>
    }
    <div class="row">
        <!-- Gráfico de horas del mes -->
        <div class="col-md-6">
            <h3>Horas realizadas en el mes</h3>
            <canvas id="horasMesChart"></canvas>
        </div>

        <!-- Gráfico de gasto -->
        <div class="col-md-6">
            <h3>Gasto en horas extras: <span id="totalGasto" class="font-weight-bold">@ViewData["GastoTotalFormatted"]</span></h3>
            <canvas id="gastoMesChart"></canvas>
        </div>
    </div>

    <div class="row mt-5">
        <div class="col-12">
            <h3>Histórico de Horas por Mes</h3>
            <canvas id="horasHistoricasChart"></canvas>
        </div>
    </div>
</div>

<!-- Formulario flotante para cargar horas -->
<div class="floating-form">
    <button class="btn btn-primary" id="btnCargarHoras" onclick="cargarFormulario()">Cargar Horas Extras</button>
    <form id="formHoras" class="hidden mt-3">
        @Html.AntiForgeryToken() <!-- Esto agrega el token antifalsificación -->
        <h4>Cargar Horas Extras</h4>
        <!-- Campo de Empleados -->
        <div class="mb-3">
            <label for="empleado" class="form-label">Empleado</label>
            <select id="empleado" name="EmpleadoId" class="form-select" required onchange="actualizarAreaYSecretaria()">
                <option value="" selected disabled>Seleccione un empleado</option>
                @if (ViewData["Empleados"] != null && ViewData["Empleados"] is List<ControlHorasExtras.Models.Empleado> empleados)
                {
                    foreach (var empleado in empleados)
                    {
                        <option value="@empleado.EmpleadoId"
                                data-area-id="@empleado.AreaId"
                                data-area-nombre="@empleado.Area?.NombreArea"
                                data-secretaria-id="@empleado.SecretariaId"
                                data-secretaria-nombre="@empleado.Secretaria?.NombreSecretaria">
                            @empleado.Legajo - @empleado.Nombre @empleado.Apellido
                        </option>
                    }
                }
            </select>

        </div>
        <!-- Campos ocultos para AreaId y SecretariaId -->
        <input type="hidden" id="areaId" name="AreaId" value="">
        <input type="hidden" id="secretariaId" name="SecretariaId" value="">
        <!-- Campo de Secretaría (solo lectura) -->
        <div class="mb-3">
            <label for="secretaria" class="form-label">Secretaría</label>
            <select id="secretaria" class="form-control" disabled>
                <option value="">Seleccione un empleado primero</option>
            </select>
        </div>
        <!-- Campo de Área (solo lectura) -->
        <div class="mb-3">
            <label for="area" class="form-label">Área</label>
            <select id="area" class="form-control" disabled>
                <option value="">Seleccione un empleado primero</option>
            </select>
        </div>
        <!-- Campo Hora Inicio -->
        <div class="mb-3">
            <label for="fechaInicio" class="form-label">Fecha y Hora Inicio</label>
            <input type="datetime-local" id="fechaInicio" name="FechaHoraInicio" class="form-control">
        </div>
        <!-- Campo Hora Fin -->
        <div class="mb-3">
            <label for="fechaFin" class="form-label">Fecha y Hora Fin</label>
            <input type="datetime-local" id="fechaFin" name="FechaHoraFin" class="form-control">
        </div>
        <!-- Campo Tipo Hora -->
        <div class="mb-3">
            <label for="tipoHora" class="form-label">Tipo de Hora</label>
            <select id="tipoHora" name="TipoHora" class="form-control">
                <option value="50%">50%</option>
                <option value="100%">100%</option>
            </select>
        </div>
        <!-- Botones Guardar y Cerrar -->
        <div class="d-flex justify-content-between">
            <button type="submit" class="btn btn-success">Guardar</button>
            <button type="button" class="btn btn-secondary" onclick="toggleForm()">Cerrar</button>
        </div>
    </form>
</div>

<!------------ SCRIPTS GRAFICOS -------------->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
<script>
    // Datos para gráficos
    const horas50 = @Html.Raw(Json.Serialize(ViewData["Horas50"] ?? 0));
    const horas100 = @Html.Raw(Json.Serialize(ViewData["Horas100"] ?? 0));
    const gasto50 = @Html.Raw(Json.Serialize(ViewData["Gasto50"] ?? 0));
    const gasto100 = @Html.Raw(Json.Serialize(ViewData["Gasto100"] ?? 0));
    // Datos del gráfico de histórico
    const meses = @Html.Raw(Json.Serialize(ViewData["Meses"]));
    const horas50Historico = @Html.Raw(Json.Serialize(ViewData["Horas50Historico"]));
    const horas100Historico = @Html.Raw(Json.Serialize(ViewData["Horas100Historico"]));
    // Convertir a números en caso de que sean cadenas vacías
    const horas50Num = parseFloat(horas50) || 0;
    const horas100Num = parseFloat(horas100) || 0;
    const gasto50Num = parseFloat(gasto50) || 0;
    const gasto100Num = parseFloat(gasto100) || 0;

    let horasMesChart, gastoMesChart, horasHistoricasChart;

    // Inicializar gráfico de horas
    const horasMesChartCanvas = document.getElementById('horasMesChart').getContext('2d');
    horasMesChart = new Chart(horasMesChartCanvas, {
        type: 'bar',
        data: {
            labels: ['50%', '100%'],
            datasets: [{
                label: 'Horas Realizadas',
                data: [horas50Num, horas100Num],
                backgroundColor: ['rgba(75, 192, 192, 0.6)', 'rgba(255, 159, 64, 0.6)']
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: { display: false },
                datalabels: {
                    anchor: 'end', // Posición de la etiqueta
                    align: 'top',  // Alineación de la etiqueta
                    formatter: Math.round, // Formatear los números (opcional)
                    font: {
                        weight: 'bold',
                        size: 12
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: {
                        padding: 10 // Ajusta el padding para los números del eje Y
                    }
                },
                x: {
                    ticks: {
                        padding: 20 // Añadir espacio entre las barras y el borde superior
                    }
                }
            },
            layout: {
                padding: {
                    top: 20, // Añadir espacio en la parte superior del gráfico
                }
            }
        },
        plugins: [ChartDataLabels]
    });

    // Inicializar gráfico de gasto mensual
    const gastoMesChartCanvas = document.getElementById('gastoMesChart').getContext('2d');
    gastoMesChart = new Chart(gastoMesChartCanvas, {
        type: 'bar',
        data: {
            labels: ['Gasto 50%', 'Gasto 100%'],
            datasets: [{
                label: 'Gasto Mensual',
                data: [gasto50Num, gasto100Num],
                backgroundColor: ['rgba(75, 192, 192, 0.6)', 'rgba(255, 159, 64, 0.6)']
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: { display: false },
                datalabels: {
                    anchor: 'end',
                    align: 'top',
                    formatter: value => value.toLocaleString('es-AR', { style: 'currency', currency: 'ARS' }),
                    font: {
                        weight: 'bold',
                        size: 12
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    ticks: { padding: 10 } // Ajusta el padding para los números del eje Y
                },
                x: {
                    ticks: { padding: 20 } // Añadir espacio entre las barras y el borde superior
                }
            },
            layout: { padding: { top: 20, }  // Añadir espacio en la parte superior del gráfico
            }
        },
        plugins: [ChartDataLabels]
    });

    // Inicializar gráfico de histórico
    const horasHistoricasChartCanvas = document.getElementById('horasHistoricasChart').getContext('2d');
    horasHistoricasChart = new Chart(horasHistoricasChartCanvas, {
        type: 'line',
        data: {
            labels: meses,
            datasets: [
                {
                    label: 'Horas 50%',
                    data: horas50Historico,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    fill: true
                },
                {
                    label: 'Horas 100%',
                    data: horas100Historico,
                    borderColor: 'rgba(255, 99, 132, 1)',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    fill: true
                }
            ]
        },
        options: { responsive: true }
    });

    document.getElementById('areaFilter')?.addEventListener('change', function () {
        const areaId = this.value;

        fetch(`/Dashboard/GetChartData?areaId=${areaId}`)
            .then(response => response.json())
            .then(data => {
                // Convertir valores a números para evitar problemas
                const horas50 = parseFloat(data.horas50) || 0;
                const horas100 = parseFloat(data.horas100) || 0;
                const gasto50 = parseFloat(data.gasto50) || 0;
                const gasto100 = parseFloat(data.gasto100) || 0;
                const historico50 = data.historico50.map(h => parseFloat(h) || 0);
                const historico100 = data.historico100.map(h => parseFloat(h) || 0);

                // Actualizar gráfico de horas
                horasMesChart.data.datasets[0].data = [horas50, horas100];
                horasMesChart.update();

                // Actualizar gráfico de gastos
                gastoMesChart.data.datasets[0].data = [gasto50, gasto100];
                gastoMesChart.update();

                // Actualizar gráfico de histórico
                horasHistoricasChart.data.datasets[0].data = historico50;
                horasHistoricasChart.data.datasets[1].data = historico100;
                horasHistoricasChart.update();
            })
            .catch(error => console.error('Error al cargar los datos del gráfico:', error));
    });

</script>

<!---------- SCRIPTS CARGAR HORAS ------------>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    const formHoras = document.getElementById('formHoras');
    const btnCargarHoras = document.getElementById('btnCargarHoras');
    let empleadoId = null;

    // Mostrar y ocultar el formulario de carga
    function cargarFormulario() {
        formHoras.classList.toggle('hidden');
        btnCargarHoras.classList.toggle('hidden');
        if (!formHoras.classList.contains('hidden')) {
            fetch('/Overtime/Create')
                .then(response => response.json())
                .then(data => cargarOpcionesFormulario(data))
                .catch(error => console.error('Error al cargar los datos:', error));
        }
    }

    // Cargar empleados en el formulario
    function cargarOpcionesFormulario(data) {
        const empleadoSelect = document.getElementById('empleado');
        empleadoSelect.innerHTML = '<option value="" selected disabled>Seleccione un empleado</option>';
        data.empleados.forEach(empleado => {
            empleadoSelect.innerHTML += `
                <option value="${empleado.empleadoId}"
                        data-area-id="${empleado.areaId}"
                        data-area-nombre="${empleado.areaNombre}"
                        data-secretaria-id="${empleado.secretariaId}"
                        data-secretaria-nombre="${empleado.secretariaNombre}">
                    ${empleado.legajo} - ${empleado.nombre} ${empleado.apellido}
                </option>`;
        });
    }

    // Actualizar área y secretaría en el formulario
    function actualizarAreaYSecretaria() {
        const empleadoSelect = document.getElementById('empleado');
        const selectedOption = empleadoSelect.options[empleadoSelect.selectedIndex];
        empleadoId = selectedOption.value;

        const areaId = selectedOption.getAttribute('data-area-id') || '';
        const areaNombre = selectedOption.getAttribute('data-area-nombre') || 'Sin Área';
        const secretariaId = selectedOption.getAttribute('data-secretaria-id') || '';
        const secretariaNombre = selectedOption.getAttribute('data-secretaria-nombre') || 'Sin Secretaría';

        document.getElementById('area').innerHTML = `<option value="${areaId}" selected>${areaNombre}</option>`;
        document.getElementById('secretaria').innerHTML = `<option value="${secretariaId}" selected>${secretariaNombre}</option>`;

        document.getElementById('areaId').value = areaId;
        document.getElementById('secretariaId').value = secretariaId;
    }

    // Validación y envío del formulario
    formHoras.addEventListener('submit', function (e) {
        e.preventDefault();

        const fechaInicio = new Date(document.getElementById('fechaInicio').value);
        const fechaFin = new Date(document.getElementById('fechaFin').value);

        // Validar fechas
        if (!fechaInicio || !fechaFin) {
            Swal.fire({
                title: 'Error',
                text: 'Debe completar las fechas de inicio y fin.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        if (fechaInicio >= fechaFin) {
            Swal.fire({
                title: 'Error',
                text: 'La fecha y hora de inicio deben ser anteriores a la fecha y hora de fin.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        if (!empleadoId) {
            Swal.fire({
                title: 'Error',
                text: 'Debe seleccionar un empleado.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
            return;
        }

        const formData = new FormData(formHoras);

        fetch('/Overtime/Create', {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    title: 'Éxito',
                    text: data.message,
                    icon: 'success',
                    confirmButtonText: 'OK'
                }).then(() => location.reload());
            } else {
                Swal.fire({
                    title: 'Error',
                    text: data.message,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire({
                title: 'Error',
                text: 'Ocurrió un error inesperado.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        });
    });
</script>

<!------------ Estilos -------------->
<style>
    .floating-form {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background: white;
        padding: 10px;
        border-radius: 8px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        max-width: 350px; /* Tamaño reducido */
        z-index: 9999;
        font-size: 0.9rem; /* Fuente más pequeña */
    }

        .floating-form h4 {
            font-size: 1rem; /* Reducir título */
            margin-bottom: 8px; /* Espacio más pequeño */
        }

        .floating-form .form-label {
            font-size: 0.85rem; /* Reducir el tamaño de los labels */
            margin-bottom: 4px; /* Menos espacio debajo de los labels */
        }

        .floating-form .form-control,
        .floating-form .form-select {
            font-size: 0.8rem; /* Reducir el tamaño de los inputs/selects */
            padding: 6px; /* Menos padding para que quede más compacto */
            height: 30px; /* Reducir la altura de los campos */
        }

        .floating-form button {
            font-size: 0.85rem; /* Reducir tamaño de los botones */
            padding: 6px 12px; /* Menos padding para el botón */
            margin-top: 10px; /* Espacio arriba del botón */
        }

    .hidden {
        display: none;
    }
</style>
