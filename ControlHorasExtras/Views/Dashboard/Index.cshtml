@{
    ViewData["Title"] = "Dashboard";
    var horasDelMes = ViewData["HorasDelMes"] as int? ?? 0;
    var gastoDelMes = ViewData["GastoDelMes"] as double? ?? 0.0;
}

<div class="container mt-4">
    <h1>Bienvenido @User.FindFirst("Nombre")?.Value</h1>
    <div class="row">
        <!-- Gráfico de horas del mes -->
        <div class="col-md-6">
            <h3>Horas realizadas en el mes</h3>
            <canvas id="horasMesChart"></canvas>
        </div>

        <!-- Gráfico de gasto -->
        <div class="col-md-6">
            <h3>Gasto en horas extras</h3>
            <canvas id="gastoMesChart"></canvas>
        </div>
    </div>

    <div class="row mt-5">
        <div class="col-12">
            <h3>Histórico de Horas por Mes</h3>
            <canvas id="horasHistoricasChart"></canvas>
        </div>
    </div>
</div>

<!-- Formulario flotante para cargar horas -->
<div class="floating-form">
    <button class="btn btn-primary" id="btnCargarHoras" onclick="cargarFormulario()">Cargar Horas Extras</button>
    <form id="formHoras" class="hidden mt-3">
        <h4>Cargar Horas Extras</h4>
        <!-- Campo para seleccionar empleado -->
        <div class="mb-3">
            <label for="empleado" class="form-label">Empleado</label>
            <select id="empleado" name="EmpleadoId" class="form-select">
                <option value="" selected disabled>Seleccione un empleado</option>
                @if (ViewData["Empleados"] != null && ViewData["Empleados"] is List<ControlHorasExtras.Models.Empleado> empleados)
                {
                    foreach (var empleado in empleados)
                    {
                        <option value="@empleado.EmpleadoId">
                            @empleado.Legajo - @empleado.Nombre @empleado.Apellido
                        </option>
                    }
                }
                else
                {
                    <option>No hay empleados disponibles</option>
                }

            </select>
        </div>

        <div class="mb-3">
            <label for="fechaInicio" class="form-label">Fecha y Hora Inicio</label>
            <input type="datetime-local" id="fechaInicio" class="form-control">
        </div>
        <div class="mb-3">
            <label for="fechaFin" class="form-label">Fecha y Hora Fin</label>
            <input type="datetime-local" id="fechaFin" class="form-control">
        </div>
        <div class="mb-3">
            <label for="tipoHora" class="form-label">Tipo de Hora</label>
            <select id="tipoHora" class="form-control">
                <option value="50">50%</option>
                <option value="100">100%</option>
            </select>
        </div>
        <div class="d-flex justify-content-between">
            <button type="submit" class="btn btn-success">Guardar</button>
            <button type="button" class="btn btn-secondary" onclick="toggleForm()">Cerrar</button>
        </div>
    </form>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
<script>
    // Datos para gráficos
    const horas50 = @Html.Raw(Json.Serialize(ViewData["Horas50"] ?? 0));
    const horas100 = @Html.Raw(Json.Serialize(ViewData["Horas100"] ?? 0));
    const gasto50 = @Html.Raw(Json.Serialize(ViewData["Gasto50"] ?? 0));
    const gasto100 = @Html.Raw(Json.Serialize(ViewData["Gasto100"] ?? 0));

    // Convertir a números en caso de que sean cadenas vacías
    const horas50Num = parseFloat(horas50) || 0;
    const horas100Num = parseFloat(horas100) || 0;
    const gasto50Num = parseFloat(gasto50) || 0;
    const gasto100Num = parseFloat(gasto100) || 0;

    console.log("Horas 50 del Mes:", horas50Num);
    console.log("Horas 100 del Mes:", horas100Num);
    console.log("Gasto 50 del Mes:", gasto50Num);
    console.log("Gasto 100 del Mes:", gasto100Num);

    // Inicializar gráficos
    const horasMesChart = document.getElementById('horasMesChart').getContext('2d');
    new Chart(horasMesChart, {
        type: 'bar',
        data: {
            labels: ['50%', '100%'],
            datasets: [{
                label: 'Horas Realizadas',
                data: [horas50, horas100],
                backgroundColor: ['rgba(75, 192, 192, 0.6)', 'rgba(255, 159, 64, 0.6)']
            }]
        },
        options: {
            responsive: true,
            plugins: {
                datalabels: {
                    anchor: 'end', // Posición de la etiqueta
                    align: 'top',  // Alineación de la etiqueta
                    formatter: Math.round, // Formatear los números (opcional)
                    font: {
                        weight: 'bold',
                        size: 12
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        },
        plugins: [ChartDataLabels] // Activar el plugin de DataLabels
    });


        // Calcular el total de gasto (50% + 100%)
    const totalGasto = gasto50Num + gasto100Num;

    // Formatear el total en formato de moneda (puedes ajustar el formato a lo que necesites)
    const totalGastoFormatted = totalGasto.toLocaleString('es-AR', { style: 'currency', currency: 'ARS' });

    // Gráfico de Gasto Mensual
    const gastoMesChart = document.getElementById('gastoMesChart').getContext('2d');
    new Chart(gastoMesChart, {
        type: 'bar',
        data: {
            labels: ['Gasto 50%', 'Gasto 100%'],
            datasets: [{
                label: 'Gasto Mensual',
                data: [gasto50Num, gasto100Num],
                backgroundColor: ['rgba(75, 192, 192, 0.6)', 'rgba(255, 159, 64, 0.6)'],
                borderColor: ['rgba(75, 192, 192, 1)', 'rgba(255, 159, 64, 1)'],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: `TOTAL: ${totalGastoFormatted}`, // Mostrar el total en el título
                    font: {
                        size: 18
                    }
                },
                datalabels: {
                    anchor: 'end',
                    align: 'top',
                    formatter: value => value.toLocaleString('es-AR', { style: 'currency', currency: 'ARS' }),
                    font: {
                        weight: 'bold',
                        size: 12
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        },
        plugins: [ChartDataLabels]
    });


        // Datos del gráfico de histórico
    const meses = @Html.Raw(Json.Serialize(ViewData["Meses"]));
    const horas50Historico = @Html.Raw(Json.Serialize(ViewData["Horas50Historico"]));
    const horas100Historico = @Html.Raw(Json.Serialize(ViewData["Horas100Historico"]));

    // Gráfico de histórico de horas
    const horasHistoricasChart = document.getElementById('horasHistoricasChart').getContext('2d');
    new Chart(horasHistoricasChart, {
        type: 'line',
        data: {
            labels: meses, // Etiquetas de los meses
            datasets: [
                {
                    label: 'Horas 50%',
                    data: horas50Historico,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    fill: true
                },
                {
                    label: 'Horas 100%',
                    data: horas100Historico,
                    borderColor: 'rgba(255, 99, 132, 1)',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    fill: true
                }
            ]
        },
        options: {
            responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: 'Histórico de Horas por Mes'
                }
            },
            scales: {
                x: {
                    title: {
                        display: true,
                        text: 'Meses'
                    }
                },
                y: {
                    beginAtZero: true,
                    title: {
                        display: true,
                        text: 'Horas'
                    }
                }
            }
        }
    });

    function cargarFormulario() {
        const form = document.getElementById('formHoras');
        const boton = document.getElementById('btnCargarHoras');

        // Mostrar/ocultar el formulario
        form.classList.toggle('hidden');
        boton.classList.toggle('hidden');

        if (!form.classList.contains('hidden')) {
            // Realizar la solicitud AJAX para cargar los datos
            fetch('/Overtime/Create') // Llamar al método Create del controlador
                .then(response => response.json())
                .then(data => {
                    // Procesar los datos y cargar las opciones en el formulario
                    cargarOpcionesFormulario(data);
                })
                .catch(error => console.error('Error al cargar los datos:', error));
        }
    }

    function cargarOpcionesFormulario(data) {
        // Llenar las opciones de empleados
        const empleadoSelect = document.getElementById('empleado');
        empleadoSelect.innerHTML = '<option value="" selected disabled>Seleccione un empleado</option>';
        data.empleados.forEach(empleado => {
            empleadoSelect.innerHTML += `<option value="${empleado.id}">${empleado.legajo} - ${empleado.nombre} ${empleado.apellido}</option>`;
        });

        // Llenar las opciones de secretarías
        const secretariaSelect = document.getElementById('secretaria');
        secretariaSelect.innerHTML = '<option value="" selected disabled>Seleccione una secretaría</option>';
        data.secretarias.forEach(secretaria => {
            secretariaSelect.innerHTML += `<option value="${secretaria.id}">${secretaria.nombre}</option>`;
        });

        // Llenar las opciones de áreas
        const areaSelect = document.getElementById('area');
        areaSelect.innerHTML = '<option value="" selected disabled>Seleccione un área</option>';
        data.areas.forEach(area => {
            areaSelect.innerHTML += `<option value="${area.id}">${area.nombre}</option>`;
        });
    }

    function toggleForm() {
        const form = document.getElementById('formHoras');
        const boton = document.getElementById('btnCargarHoras');

        form.classList.toggle('hidden'); // Mostrar/ocultar el formulario
        boton.classList.toggle('hidden'); // Mostrar/ocultar el botón
    }
</script>

<style>
    .floating-form {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background: white;
        padding: 10px;
        border-radius: 8px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        max-width: 350px; /* Tamaño reducido */
        z-index: 9999;
        font-size: 0.9rem; /* Fuente más pequeña */
    }

        .floating-form h4 {
            font-size: 1rem; /* Reducir título */
            margin-bottom: 8px; /* Espacio más pequeño */
        }

        .floating-form .form-label {
            font-size: 0.85rem; /* Reducir el tamaño de los labels */
            margin-bottom: 4px; /* Menos espacio debajo de los labels */
        }

        .floating-form .form-control,
        .floating-form .form-select {
            font-size: 0.8rem; /* Reducir el tamaño de los inputs/selects */
            padding: 6px; /* Menos padding para que quede más compacto */
            height: 30px; /* Reducir la altura de los campos */
        }

        .floating-form button {
            font-size: 0.85rem; /* Reducir tamaño de los botones */
            padding: 6px 12px; /* Menos padding para el botón */
            margin-top: 10px; /* Espacio arriba del botón */
        }

    .hidden {
        display: none;
    }
</style>
