@{
    ViewData["Title"] = "Dashboard";
    var horasDelMes = ViewData["HorasDelMes"] as int? ?? 0;
    var gastoDelMes = ViewData["GastoDelMes"] as double? ?? 0.0;
    var rol = User.FindFirst("Rol")?.Value;
}

<!-- Graficos -->
<div class="container mt-4">
    <h1>Bienvenido @User.FindFirst("Nombre")?.Value</h1>
    @if (rol == "Secretario" || rol == "Intendente" || rol == "Secretario de Hacienda")
    {
        <div class="col-md-6">
            <label for="areaFilter">Filtrar por área:</label>
            <select id="areaFilter" class="form-select">
                <option value="">Todas las áreas</option>
                @foreach (var area in ViewData["Areas"] as List<ControlHorasExtras.Models.Area>)
                {
                    <option value="@area.AreaId">@area.NombreArea</option>
                }
            </select>
        </div>
    }
    <div class="row">
        <!-- Gráfico de horas del mes -->
        <div class="col-md-6">
            <h3>Horas realizadas en el mes</h3>
            <canvas id="horasMesChart"></canvas>
        </div>

        <!-- Gráfico de gasto -->
        <div class="col-md-6">
            <h3>Gasto en horas extras: <span id="totalGasto" class="font-weight-bold">@ViewData["GastoTotalFormatted"]</span></h3>
            <canvas id="gastoMesChart"></canvas>
        </div>
    </div>

    <div class="row mt-5">
        <div class="col-12">
            <h3>Histórico de Horas por Mes</h3>
            <canvas id="horasHistoricasChart"></canvas>
        </div>
    </div>
</div>

<!-- Formulario flotante para cargar horas -->
<div class="floating-form">
    <button class="btn btn-primary" id="btnCargarHoras" onclick="cargarFormulario()">Cargar Horas Extras</button>
    <form id="formHoras" class="hidden mt-3">
        @Html.AntiForgeryToken() <!-- Esto agrega el token antifalsificación -->
        <h4>Cargar Horas Extras</h4>
        <!-- Campo de Empleados -->
        <div class="mb-3">
            <label for="empleado" class="form-label">Empleado</label>
            <select id="empleado" name="EmpleadoId" class="form-select" required onchange="actualizarAreaYSecretaria()">
                <option value="" selected disabled>Seleccione un empleado</option>
                @if (ViewData["Empleados"] != null && ViewData["Empleados"] is List<ControlHorasExtras.Models.Empleado> empleados)
                {
                    foreach (var empleado in empleados)
                    {
                        <option value="@empleado.EmpleadoId"
                                data-area-id="@empleado.AreaId"
                                data-area-nombre="@empleado.Area?.NombreArea"
                                data-secretaria-id="@empleado.SecretariaId"
                                data-secretaria-nombre="@empleado.Secretaria?.NombreSecretaria">
                            @empleado.Legajo - @empleado.Nombre @empleado.Apellido
                        </option>
                    }
                }
            </select>

        </div>
        <!-- Campos ocultos para AreaId y SecretariaId -->
        <input type="hidden" id="areaId" name="AreaId" value="">
        <input type="hidden" id="secretariaId" name="SecretariaId" value="">
        <!-- Campo de Secretaría (solo lectura) -->
        <div class="mb-3">
            <label for="secretaria" class="form-label">Secretaría</label>
            <select id="secretaria" class="form-control" disabled>
                <option value="">Seleccione un empleado primero</option>
            </select>
        </div>
        <!-- Campo de Área (solo lectura) -->
        <div class="mb-3">
            <label for="area" class="form-label">Área</label>
            <select id="area" class="form-control" disabled>
                <option value="">Seleccione un empleado primero</option>
            </select>
        </div>
        <!-- Campo Hora Inicio -->
        <div class="mb-3">
            <label for="fechaInicio" class="form-label">Fecha y Hora Inicio</label>
            <input type="datetime-local" id="fechaInicio" name="FechaHoraInicio" class="form-control">
        </div>
        <!-- Campo Hora Fin -->
        <div class="mb-3">
            <label for="fechaFin" class="form-label">Fecha y Hora Fin</label>
            <input type="datetime-local" id="fechaFin" name="FechaHoraFin" class="form-control">
        </div>
        <!-- Campo Tipo Hora -->
        <div class="mb-3">
            <label for="tipoHora" class="form-label">Tipo de Hora</label>
            <select id="tipoHora" name="TipoHora" class="form-control">
                <option value="50%">50%</option>
                <option value="100%">100%</option>
            </select>
        </div>
        <!-- Botones Guardar y Cerrar -->
        <div class="d-flex justify-content-between">
            <button type="submit" class="btn btn-success">Guardar</button>
            <button type="button" class="btn btn-secondary" onclick="toggleForm()">Cerrar</button>
        </div>
    </form>
</div>


<link rel="stylesheet" href="~/css/Dashboard.css">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="~/js/Dashboard.js"></script>

<script>
    window.dashboardData = {
        horas50: @Html.Raw(Json.Serialize(ViewData["Horas50"] ?? 0)),
        horas100: @Html.Raw(Json.Serialize(ViewData["Horas100"] ?? 0)),
        gasto50: @Html.Raw(Json.Serialize(ViewData["Gasto50"] ?? 0)),
        gasto100: @Html.Raw(Json.Serialize(ViewData["Gasto100"] ?? 0)),
        meses: @Html.Raw(Json.Serialize(ViewData["Meses"])),
        horas50Historico: @Html.Raw(Json.Serialize(ViewData["Horas50Historico"])),
        horas100Historico: @Html.Raw(Json.Serialize(ViewData["Horas100Historico"]))
    };
</script>
